{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1dc8994c-ab54-43ac-b2a6-bf1366b4a602",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!/usr/bin/env python\n",
    "\n",
    "from rlglue.environment import BaseEnvironment \n",
    "\n",
    "import numpy as np\n",
    "from copy import deepcopy\n",
    "\n",
    "class Environment(BaseEnvironment):\n",
    "    \"\"\"Implements the environment for an RLGlue environment\n",
    "\n",
    "    Note:\n",
    "        env_init, env_start, env_step, env_cleanup, and env_message are required\n",
    "        methods.\n",
    "    \"\"\"\n",
    "\n",
    "    # def __init__(self):\n",
    "\n",
    "\n",
    "    def env_init(self, env_info={}):\n",
    "        \"\"\"Setup for the environment called when the experiment first starts.\n",
    "\n",
    "        Note:\n",
    "            Initialize a tuple with the reward, first state observation, boolean\n",
    "            indicating if it's terminal.\n",
    "        \"\"\"\n",
    "        self.rows = 4\n",
    "        self.cols = 12\n",
    "        self.start = [0,0]\n",
    "        self.goal = [0,11]\n",
    "        self.current_state = None\n",
    "\n",
    "    def env_start(self):\n",
    "        \"\"\"The first method called when the episode starts, called before the\n",
    "        agent starts.\n",
    "\n",
    "        Returns:\n",
    "            The first state observation from the environment.\n",
    "        \"\"\"\n",
    "        self.current_state = self.start  # An empty NumPy array\n",
    "\n",
    "        self.reward_obs_term = (0.0, self.observation(self.current_state), False)\n",
    "\n",
    "        return self.reward_obs_term[1]\n",
    "\n",
    "    def env_step(self, action):\n",
    "        \"\"\"A step taken by the environment.\n",
    "\n",
    "        Args:\n",
    "            action: The action taken by the agent\n",
    "\n",
    "        Returns:\n",
    "            (float, state, Boolean): a tuple of the reward, state observation,\n",
    "                and boolean indicating if it's terminal.\n",
    "        \"\"\"\n",
    "\n",
    "        new_state = deepcopy(self.current_state)\n",
    "\n",
    "        if action == 0: #right\n",
    "            new_state[1] = min(new_state[1]+1, self.cols-1)\n",
    "        elif action == 1: #down\n",
    "            new_state[0] = max(new_state[0]-1, 0)\n",
    "        elif action == 2: #left\n",
    "            new_state[1] = max(new_state[1]-1, 0)\n",
    "        elif action == 3: #up\n",
    "            new_state[0] = min(new_state[0]+1, self.rows-1)\n",
    "        else:\n",
    "            raise Exception(\"Invalid action.\")\n",
    "        self.current_state = new_state\n",
    "\n",
    "        reward = -1.0\n",
    "        is_terminal = False\n",
    "        if self.current_state[0] == 0 and self.current_state[1] > 0:\n",
    "            if self.current_state[1] < self.cols - 1:\n",
    "                reward = -100.0\n",
    "                self.current_state = deepcopy(self.start)\n",
    "            else:\n",
    "                is_terminal = True\n",
    "\n",
    "        self.reward_obs_term = (reward, self.observation(self.current_state), is_terminal)\n",
    "\n",
    "        return self.reward_obs_term\n",
    "\n",
    "    def observation(self, state):\n",
    "        return state[0] * self.cols + state[1] \n",
    "\n",
    "    def env_cleanup(self):\n",
    "        \"\"\"Cleanup done after the environment ends\"\"\"\n",
    "        pass\n",
    "\n",
    "    def env_message(self, message):\n",
    "        \"\"\"A message asking the environment for information\n",
    "\n",
    "        Args:\n",
    "            message (string): the message passed to the environment\n",
    "\n",
    "        Returns:\n",
    "            string: the response (or answer) to the message\n",
    "        \"\"\"\n",
    "        if message == \"what is the current reward?\":\n",
    "            return \"{}\".format(self.reward_obs_term[0])\n",
    "\n",
    "        # else\n",
    "        return \"I don't know how to respond to your message\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "830c4cb4-5d3e-49ac-b9e3-4cb64b7db4d9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
